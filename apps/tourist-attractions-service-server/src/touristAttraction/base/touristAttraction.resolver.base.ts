/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TouristAttraction } from "./TouristAttraction";
import { TouristAttractionCountArgs } from "./TouristAttractionCountArgs";
import { TouristAttractionFindManyArgs } from "./TouristAttractionFindManyArgs";
import { TouristAttractionFindUniqueArgs } from "./TouristAttractionFindUniqueArgs";
import { CreateTouristAttractionArgs } from "./CreateTouristAttractionArgs";
import { UpdateTouristAttractionArgs } from "./UpdateTouristAttractionArgs";
import { DeleteTouristAttractionArgs } from "./DeleteTouristAttractionArgs";
import { TouristAttractionService } from "../touristAttraction.service";
@graphql.Resolver(() => TouristAttraction)
export class TouristAttractionResolverBase {
  constructor(protected readonly service: TouristAttractionService) {}

  async _touristAttractionsMeta(
    @graphql.Args() args: TouristAttractionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TouristAttraction])
  async touristAttractions(
    @graphql.Args() args: TouristAttractionFindManyArgs
  ): Promise<TouristAttraction[]> {
    return this.service.touristAttractions(args);
  }

  @graphql.Query(() => TouristAttraction, { nullable: true })
  async touristAttraction(
    @graphql.Args() args: TouristAttractionFindUniqueArgs
  ): Promise<TouristAttraction | null> {
    const result = await this.service.touristAttraction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TouristAttraction)
  async createTouristAttraction(
    @graphql.Args() args: CreateTouristAttractionArgs
  ): Promise<TouristAttraction> {
    return await this.service.createTouristAttraction({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TouristAttraction)
  async updateTouristAttraction(
    @graphql.Args() args: UpdateTouristAttractionArgs
  ): Promise<TouristAttraction | null> {
    try {
      return await this.service.updateTouristAttraction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TouristAttraction)
  async deleteTouristAttraction(
    @graphql.Args() args: DeleteTouristAttractionArgs
  ): Promise<TouristAttraction | null> {
    try {
      return await this.service.deleteTouristAttraction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
