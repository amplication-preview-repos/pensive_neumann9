/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TouristAttractionService } from "../touristAttraction.service";
import { TouristAttractionCreateInput } from "./TouristAttractionCreateInput";
import { TouristAttraction } from "./TouristAttraction";
import { TouristAttractionFindManyArgs } from "./TouristAttractionFindManyArgs";
import { TouristAttractionWhereUniqueInput } from "./TouristAttractionWhereUniqueInput";
import { TouristAttractionUpdateInput } from "./TouristAttractionUpdateInput";

export class TouristAttractionControllerBase {
  constructor(protected readonly service: TouristAttractionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TouristAttraction })
  async createTouristAttraction(
    @common.Body() data: TouristAttractionCreateInput
  ): Promise<TouristAttraction> {
    return await this.service.createTouristAttraction({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        latitude: true,
        imageUrl: true,
        name: true,
        longitude: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TouristAttraction] })
  @ApiNestedQuery(TouristAttractionFindManyArgs)
  async touristAttractions(
    @common.Req() request: Request
  ): Promise<TouristAttraction[]> {
    const args = plainToClass(TouristAttractionFindManyArgs, request.query);
    return this.service.touristAttractions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        latitude: true,
        imageUrl: true,
        name: true,
        longitude: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TouristAttraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async touristAttraction(
    @common.Param() params: TouristAttractionWhereUniqueInput
  ): Promise<TouristAttraction | null> {
    const result = await this.service.touristAttraction({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        latitude: true,
        imageUrl: true,
        name: true,
        longitude: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TouristAttraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTouristAttraction(
    @common.Param() params: TouristAttractionWhereUniqueInput,
    @common.Body() data: TouristAttractionUpdateInput
  ): Promise<TouristAttraction | null> {
    try {
      return await this.service.updateTouristAttraction({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          latitude: true,
          imageUrl: true,
          name: true,
          longitude: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TouristAttraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTouristAttraction(
    @common.Param() params: TouristAttractionWhereUniqueInput
  ): Promise<TouristAttraction | null> {
    try {
      return await this.service.deleteTouristAttraction({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          latitude: true,
          imageUrl: true,
          name: true,
          longitude: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
